def build_rnn_model(input_shape):
    model = Sequential()
    # First LSTM layer with Dropout
    model.add(LSTM(units=50, return_sequences=True, input_shape=(input_shape[1], input_shape[2])))
    model.add(Dropout(0.2))
    
    # Second LSTM layer
    model.add(LSTM(units=50, return_sequences=False))
    model.add(Dropout(0.2))
    
    # Dense layer to interpret the features
    model.add(Dense(units=25))
    
    # Final output layer
    model.add(Dense(units=1))
    
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

# Assuming X_train has the shape (batch_size, sequence_length, num_features)
model = build_rnn_model(X_train.shape)
