class PercentCommisionScheme(bt.CommInfoBase):
    params = (
        ('commission', 0.001),  # Default 0.1% commission (Binance-like)
        ('stocklike', False),   # Treat as non-stock (crypto-like behavior)
        ('commtype', bt.CommInfoBase.COMM_PERC),  # Percentage-based commission
    )

    def _getcommission(self, size, price, pseudoexec):
        trade_value = abs(size) * price
        return trade_value * self.p.commission

# Define the EMA and VaR-based strategy(sample)

class EMAVaRStrategy(bt.Strategy):
    params = (
        ('ema_period', 50),
        ('var_period', 252),  # Rolling window for daily returns' VaR calculation
    )

    def __init__(self):
        # Define EMA
        self.ema = bt.indicators.EMA(self.data.close, period=self.params.ema_period)
        
        # Calculate percentage returns (manually for Backtrader)
        self.data_returns = (self.data.close(0) - self.data.close(-1)) / self.data.close(-1)
        
        # Define rolling window for VaR (standard deviation * sqrt of 252)
        self.var = bt.indicators.StandardDeviation(self.data_returns, period=self.params.var_period) * math.sqrt(252)

    def next(self):
        if self.position.size == 0:  # No position yet
            if self.data.close > self.ema:  # Simple condition to buy
                self.buy()
        elif self.data.close < self.ema:  # Exit if price drops below EMA
            self.sell()


# Initialize Cerebro engine
cerebro = bt.Cerebro()

# Add your data feed (ensure 'dataframe' is defined with OHLCV data)
data = bt.feeds.PandasData(dataname=dataframe)
cerebro.adddata(data)

# Add the strategy to Cerebro
cerebro.addstrategy(EMAVaRStrategy)

# Set up custom commission for crypto
crypto_commission = PercentCommisionScheme(commission=0.001)  # 0.1% commission
cerebro.broker.addcommissioninfo(crypto_commission)

# Set the initial cash
cerebro.broker.set_cash(10000)  # Starting with 10,000 in cash

# Run the backtest
results = cerebro.run()

# Optionally, plot the results
cerebro.plot()
