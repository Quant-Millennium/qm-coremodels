import talib as ta  

# Calculate Simple Moving Average (SMA)
train_data.loc[:, 'SMA'] = ta.SMA(train_data['close'], timeperiod=14)

# Calculate Exponential Moving Average (EMA)
train_data.loc[:, 'EMA'] = ta.EMA(train_data['close'], timeperiod=14)

# Calculate Moving Average Convergence Divergence (MACD)
train_data.loc[:, 'MACD'], train_data.loc[:, 'MACD_Signal'], _ = ta.MACD(train_data['close'], fastperiod=12, slowperiod=26, signalperiod=9)

# Calculate Relative Strength Index (RSI)
train_data.loc[:, 'RSI'] = ta.RSI(train_data['close'], timeperiod=14)

# Calculate Stochastic Oscillator (K%)
train_data.loc[:, 'Stochastic_K'], train_data.loc[:, 'Stochastic_D'] = ta.STOCH(train_data['high'], train_data['low'], train_data['close'], fastk_period=14, slowk_period=3, slowd_period=3)

# Calculate Chaikin Money Flow (CMF)
train_data.loc[:, 'CMF'] = ta.ADOSC(train_data['high'], train_data['low'], train_data['close'], train_data['volume'], fastperiod=3, slowperiod=10)

# Calculate On-Balance Volume (OBV)
train_data.loc[:, 'OBV'] = ta.OBV(train_data['close'], train_data['volume'])

# Calculate Volume-Weighted Average Price (VWAP)
# TA-Lib doesn't directly support VWAP, so we manually calculate it
train_data.loc[:, 'VWAP'] = (train_data.loc[:, 'volume'] * (train_data.loc[:, 'high'] + train_data.loc[:, 'low'] + train_data.loc[:, 'close']) / 3).cumsum() / train_data.loc[:, 'volume'].cumsum()

# Calculate Historical Volatility 
train_data.loc[:, 'Historical_Volatility'] = ta.STDDEV(train_data['close'], timeperiod=30) * np.sqrt(365)
