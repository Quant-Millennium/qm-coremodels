def load_csv_to_dataframe(file_path):
    """
    Loads a CSV file into a pandas DataFrame.

    Parameters:
    file_path (str): The path to the CSV file.

    Returns:
    pd.DataFrame: A pandas DataFrame containing the CSV data.
    """
    try:
        # Read the CSV file
        df = pd.read_csv(file_path)
        # Return the DataFrame
        return df
    except FileNotFoundError:
        print(f"Error: The file '{file_path}' was not found.")
    except pd.errors.EmptyDataError:
        print("Error: The file is empty.")
    except pd.errors.ParserError:
        print("Error: The file could not be parsed.")
    except Exception as e:
        print(f"An error occurred: {e}")

# Split sequentially by percentage 
# Determine the split indices
train_size = int(0.75 * len(bitcoin_historical_data))  # 75% for training
val_size = int(0.10 * len(bitcoin_historical_data))    # 10% for validation
test_size = len(bitcoin_historical_data) - train_size - val_size  # The remaining 15% for testing

# Split the data before scaling
train_data = bitcoin_historical_data.iloc[:train_size].copy()
val_data = bitcoin_historical_data.iloc[train_size:train_size + val_size].copy()
test_data = bitcoin_historical_data.iloc[train_size + val_size:].copy()

# Check the sizes of each set
print("Training Data Size:", len(train_data))
print("Validation Data Size:", len(val_data))
print("Test Data Size:", len(test_data))

# Display the first few rows of each set for verification
print("Training Set Sample:\n", train_data.head())
print("Validation Set Sample:\n", val_data.head())
print("Test Set Sample:\n", test_data.head())

from sklearn.preprocessing import MinMaxScaler

# Initialize the MinMaxScaler
scaler = MinMaxScaler()

# Fit the scaler on the training data only
train_data_scaled = train_data.copy()
train_data_scaled.iloc[:, :] = scaler.fit_transform(train_data)

# Apply the same scaler (without refitting) to the validation and test data
val_data_scaled = val_data.copy()
val_data_scaled.iloc[:, :] = scaler.transform(val_data)

test_data_scaled = test_data.copy()
test_data_scaled.iloc[:, :] = scaler.transform(test_data)

# Display the scaled data
print("Training Set Scaled Sample (MinMax):\n", train_data_scaled.head())
print("Validation Set Scaled Sample (MinMax):\n", val_data_scaled.head())
print("Test Set Scaled Sample (MinMax):\n", test_data_scaled.head())
